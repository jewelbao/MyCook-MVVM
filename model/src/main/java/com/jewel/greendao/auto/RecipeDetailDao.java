package com.jewel.greendao.auto;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jewel.model.cookery.RecipeDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECIPE_DETAIL".
*/
public class RecipeDetailDao extends AbstractDao<RecipeDetail, Long> {

    public static final String TABLENAME = "RECIPE_DETAIL";

    /**
     * Properties of entity RecipeDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Img = new Property(1, String.class, "img", false, "IMG");
        public final static Property Ingredients = new Property(2, String.class, "ingredients", false, "INGREDIENTS");
        public final static Property Method = new Property(3, String.class, "method", false, "METHOD");
        public final static Property Sumary = new Property(4, String.class, "sumary", false, "SUMARY");
        public final static Property Title = new Property(5, String.class, "title", false, "TITLE");
    }


    public RecipeDetailDao(DaoConfig config) {
        super(config);
    }
    
    public RecipeDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECIPE_DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"IMG\" TEXT," + // 1: img
                "\"INGREDIENTS\" TEXT," + // 2: ingredients
                "\"METHOD\" TEXT," + // 3: method
                "\"SUMARY\" TEXT," + // 4: sumary
                "\"TITLE\" TEXT);"); // 5: title
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECIPE_DETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RecipeDetail entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(2, img);
        }
 
        String ingredients = entity.getIngredients();
        if (ingredients != null) {
            stmt.bindString(3, ingredients);
        }
 
        String method = entity.getMethod();
        if (method != null) {
            stmt.bindString(4, method);
        }
 
        String sumary = entity.getSumary();
        if (sumary != null) {
            stmt.bindString(5, sumary);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RecipeDetail entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(2, img);
        }
 
        String ingredients = entity.getIngredients();
        if (ingredients != null) {
            stmt.bindString(3, ingredients);
        }
 
        String method = entity.getMethod();
        if (method != null) {
            stmt.bindString(4, method);
        }
 
        String sumary = entity.getSumary();
        if (sumary != null) {
            stmt.bindString(5, sumary);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public RecipeDetail readEntity(Cursor cursor, int offset) {
        RecipeDetail entity = new RecipeDetail( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // img
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ingredients
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // method
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sumary
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // title
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RecipeDetail entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setImg(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIngredients(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMethod(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSumary(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RecipeDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RecipeDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RecipeDetail entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
