package com.jewel.greendao.auto;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jewel.ListStringConverter;
import com.jewel.model.cookery.RecipeDetail;
import com.jewel.model.cookery.RecipeInfo.ObjToStringConverter;
import java.util.List;

import com.jewel.model.cookery.RecipeInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECIPE_INFO".
*/
public class RecipeInfoDao extends AbstractDao<RecipeInfo, String> {

    public static final String TABLENAME = "RECIPE_INFO";

    /**
     * Properties of entity RecipeInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CtgTitles = new Property(0, String.class, "ctgTitles", false, "CTG_TITLES");
        public final static Property MenuId = new Property(1, String.class, "menuId", true, "MENU_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Recipe = new Property(3, String.class, "recipe", false, "RECIPE");
        public final static Property Thumbnail = new Property(4, String.class, "thumbnail", false, "THUMBNAIL");
        public final static Property CtgIds = new Property(5, String.class, "ctgIds", false, "CTG_IDS");
    }

    private final ObjToStringConverter recipeConverter = new ObjToStringConverter();
    private final ListStringConverter ctgIdsConverter = new ListStringConverter();

    public RecipeInfoDao(DaoConfig config) {
        super(config);
    }
    
    public RecipeInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECIPE_INFO\" (" + //
                "\"CTG_TITLES\" TEXT," + // 0: ctgTitles
                "\"MENU_ID\" TEXT PRIMARY KEY NOT NULL ," + // 1: menuId
                "\"NAME\" TEXT," + // 2: name
                "\"RECIPE\" TEXT," + // 3: recipe
                "\"THUMBNAIL\" TEXT," + // 4: thumbnail
                "\"CTG_IDS\" TEXT);"); // 5: ctgIds
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECIPE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RecipeInfo entity) {
        stmt.clearBindings();
 
        String ctgTitles = entity.getCtgTitles();
        if (ctgTitles != null) {
            stmt.bindString(1, ctgTitles);
        }
 
        String menuId = entity.getMenuId();
        if (menuId != null) {
            stmt.bindString(2, menuId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        RecipeDetail recipe = entity.getRecipe();
        if (recipe != null) {
            stmt.bindString(4, recipeConverter.convertToDatabaseValue(recipe));
        }
 
        String thumbnail = entity.getThumbnail();
        if (thumbnail != null) {
            stmt.bindString(5, thumbnail);
        }
 
        List ctgIds = entity.getCtgIds();
        if (ctgIds != null) {
            stmt.bindString(6, ctgIdsConverter.convertToDatabaseValue(ctgIds));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RecipeInfo entity) {
        stmt.clearBindings();
 
        String ctgTitles = entity.getCtgTitles();
        if (ctgTitles != null) {
            stmt.bindString(1, ctgTitles);
        }
 
        String menuId = entity.getMenuId();
        if (menuId != null) {
            stmt.bindString(2, menuId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        RecipeDetail recipe = entity.getRecipe();
        if (recipe != null) {
            stmt.bindString(4, recipeConverter.convertToDatabaseValue(recipe));
        }
 
        String thumbnail = entity.getThumbnail();
        if (thumbnail != null) {
            stmt.bindString(5, thumbnail);
        }
 
        List ctgIds = entity.getCtgIds();
        if (ctgIds != null) {
            stmt.bindString(6, ctgIdsConverter.convertToDatabaseValue(ctgIds));
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    @Override
    public RecipeInfo readEntity(Cursor cursor, int offset) {
        RecipeInfo entity = new RecipeInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ctgTitles
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // menuId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : recipeConverter.convertToEntityProperty(cursor.getString(offset + 3)), // recipe
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // thumbnail
            cursor.isNull(offset + 5) ? null : ctgIdsConverter.convertToEntityProperty(cursor.getString(offset + 5)) // ctgIds
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RecipeInfo entity, int offset) {
        entity.setCtgTitles(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMenuId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRecipe(cursor.isNull(offset + 3) ? null : recipeConverter.convertToEntityProperty(cursor.getString(offset + 3)));
        entity.setThumbnail(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCtgIds(cursor.isNull(offset + 5) ? null : ctgIdsConverter.convertToEntityProperty(cursor.getString(offset + 5)));
     }
    
    @Override
    protected final String updateKeyAfterInsert(RecipeInfo entity, long rowId) {
        return entity.getMenuId();
    }
    
    @Override
    public String getKey(RecipeInfo entity) {
        if(entity != null) {
            return entity.getMenuId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RecipeInfo entity) {
        return entity.getMenuId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
